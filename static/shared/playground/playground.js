/*!
 * @license
 * Copyright 2021 The Go Authors. All rights reserved.
 * Use of this source code is governed by a BSD-style
 * license that can be found in the LICENSE file.
 */
const PlayExampleClassName = {
  PLAY_HREF: ".js-exampleHref",
  PLAY_CONTAINER: ".js-exampleContainer",
  EXAMPLE_INPUT: ".Documentation-exampleCode",
  EXAMPLE_OUTPUT: ".Documentation-exampleOutput",
  EXAMPLE_ERROR: ".Documentation-exampleError",
  PLAY_BUTTON: ".Documentation-examplePlayButton",
  SHARE_BUTTON: ".Documentation-exampleShareButton",
  FORMAT_BUTTON: ".Documentation-exampleFormatButton",
  RUN_BUTTON: ".Documentation-exampleRunButton"
};
export class PlaygroundExampleController {
  constructor(exampleEl) {
    this.exampleEl = exampleEl;
    this.exampleEl = exampleEl;
    this.anchorEl = exampleEl.querySelector("a");
    this.errorEl = exampleEl.querySelector(PlayExampleClassName.EXAMPLE_ERROR);
    this.playButtonEl = exampleEl.querySelector(PlayExampleClassName.PLAY_BUTTON);
    this.shareButtonEl = exampleEl.querySelector(PlayExampleClassName.SHARE_BUTTON);
    this.formatButtonEl = exampleEl.querySelector(PlayExampleClassName.FORMAT_BUTTON);
    this.runButtonEl = exampleEl.querySelector(PlayExampleClassName.RUN_BUTTON);
    this.inputEl = this.makeTextArea(exampleEl.querySelector(PlayExampleClassName.EXAMPLE_INPUT));
    this.outputEl = exampleEl.querySelector(PlayExampleClassName.EXAMPLE_OUTPUT);
    this.playButtonEl?.addEventListener("click", () => this.handleShareButtonClick());
    this.shareButtonEl?.addEventListener("click", () => this.handleShareButtonClick());
    this.formatButtonEl?.addEventListener("click", () => this.handleFormatButtonClick());
    this.runButtonEl?.addEventListener("click", () => this.handleRunButtonClick());
    if (!this.inputEl)
      return;
    this.resize();
    this.inputEl.addEventListener("keyup", () => this.resize());
    this.inputEl.addEventListener("keydown", (e) => this.onKeydown(e));
  }
  makeTextArea(el) {
    const t = document.createElement("textarea");
    t.classList.add("Documentation-exampleCode", "code");
    t.spellcheck = false;
    t.value = el?.textContent ?? "";
    el?.parentElement?.replaceChild(t, el);
    return t;
  }
  getAnchorHash() {
    return this.anchorEl?.hash;
  }
  expand() {
    this.exampleEl.open = true;
  }
  resize() {
    if (this.inputEl?.value) {
      const numLineBreaks = (this.inputEl.value.match(/\n/g) || []).length;
      this.inputEl.style.height = `${(20 + numLineBreaks * 20 + 12 + 2) / 16}rem`;
    }
  }
  onKeydown(e) {
    if (e.key === "Tab") {
      document.execCommand("insertText", false, "	");
      e.preventDefault();
    }
  }
  setInputText(output) {
    if (this.inputEl) {
      this.inputEl.value = output;
    }
  }
  setOutputText(output) {
    if (this.outputEl) {
      this.outputEl.textContent = output;
    }
  }
  setErrorText(err) {
    if (this.errorEl) {
      this.errorEl.textContent = err;
    }
    this.setOutputText("An error has occurred\u2026");
  }
  handleShareButtonClick() {
    const PLAYGROUND_BASE_URL = "https://play.golang.org/p/";
    this.setOutputText("Waiting for remote server\u2026");
    fetch("/play/share", {
      method: "POST",
      body: this.inputEl?.value
    }).then((res) => res.text()).then((shareId) => {
      const href = PLAYGROUND_BASE_URL + shareId;
      this.setOutputText(`<a href="${href}">${href}</a>`);
      window.open(href);
    }).catch((err) => {
      this.setErrorText(err);
    });
  }
  handleFormatButtonClick() {
    this.setOutputText("Waiting for remote server\u2026");
    const body = new FormData();
    body.append("body", this.inputEl?.value ?? "");
    fetch("/play/fmt", {
      method: "POST",
      body
    }).then((res) => res.json()).then(({Body, Error}) => {
      this.setOutputText(Error || "Done.");
      if (Body) {
        this.setInputText(Body);
        this.resize();
      }
    }).catch((err) => {
      this.setErrorText(err);
    });
  }
  handleRunButtonClick() {
    this.setOutputText("Waiting for remote server\u2026");
    fetch("/play/compile", {
      method: "POST",
      body: JSON.stringify({body: this.inputEl?.value, version: 2})
    }).then((res) => res.json()).then(async ({Events, Errors}) => {
      this.setOutputText(Errors || "");
      for (const e of Events || []) {
        this.setOutputText(e.Message);
        await new Promise((resolve) => setTimeout(resolve, e.Delay / 1e6));
      }
    }).catch((err) => {
      this.setErrorText(err);
    });
  }
}
const exampleHashRegex = location.hash.match(/^#(example-.*)$/);
if (exampleHashRegex) {
  const exampleHashEl = document.getElementById(exampleHashRegex[1]);
  if (exampleHashEl) {
    exampleHashEl.open = true;
  }
}
const exampleHrefs = [
  ...document.querySelectorAll(PlayExampleClassName.PLAY_HREF)
];
const findExampleHash = (playContainer) => exampleHrefs.find((ex) => {
  return ex.hash === playContainer.getAnchorHash();
});
for (const el of document.querySelectorAll(PlayExampleClassName.PLAY_CONTAINER)) {
  const playContainer = new PlaygroundExampleController(el);
  const exampleHref = findExampleHash(playContainer);
  if (exampleHref) {
    exampleHref.addEventListener("click", () => {
      playContainer.expand();
    });
  } else {
    console.warn("example href not found");
  }
}
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsicGxheWdyb3VuZC50cyJdLAogICJzb3VyY2VzQ29udGVudCI6IFsiLyohXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMjEgVGhlIEdvIEF1dGhvcnMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhIEJTRC1zdHlsZVxuICogbGljZW5zZSB0aGF0IGNhbiBiZSBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlLlxuICovXG5cbi8vIFRoaXMgZmlsZSBpbXBsZW1lbnRzIHRoZSBwbGF5Z3JvdW5kIGltcGxlbWVudGF0aW9uIG9mIHRoZSBkb2N1bWVudGF0aW9uXG4vLyBwYWdlLiBUaGUgcGxheWdyb3VuZCBpbnZvbHZlcyBhIFwicGxheVwiIGJ1dHRvbiB0aGF0IGFsbG93cyB5b3UgdG8gb3BlbiB1cFxuLy8gYSBuZXcgbGluayB0byBwbGF5LmdvbGFuZy5vcmcgdXNpbmcgdGhlIGV4YW1wbGUgY29kZS5cblxuLy8gVGhlIENTUyBpcyBpbiBjb250ZW50L3N0YXRpYy9jc3Mvc3R5bGVzaGVldC5jc3MuXG5cbi8qKlxuICogQ1NTIGNsYXNzZXMgdXNlZCBieSBQbGF5Z3JvdW5kRXhhbXBsZUNvbnRyb2xsZXJcbiAqL1xuY29uc3QgUGxheUV4YW1wbGVDbGFzc05hbWUgPSB7XG4gIFBMQVlfSFJFRjogJy5qcy1leGFtcGxlSHJlZicsXG4gIFBMQVlfQ09OVEFJTkVSOiAnLmpzLWV4YW1wbGVDb250YWluZXInLFxuICBFWEFNUExFX0lOUFVUOiAnLkRvY3VtZW50YXRpb24tZXhhbXBsZUNvZGUnLFxuICBFWEFNUExFX09VVFBVVDogJy5Eb2N1bWVudGF0aW9uLWV4YW1wbGVPdXRwdXQnLFxuICBFWEFNUExFX0VSUk9SOiAnLkRvY3VtZW50YXRpb24tZXhhbXBsZUVycm9yJyxcbiAgUExBWV9CVVRUT046ICcuRG9jdW1lbnRhdGlvbi1leGFtcGxlUGxheUJ1dHRvbicsXG4gIFNIQVJFX0JVVFRPTjogJy5Eb2N1bWVudGF0aW9uLWV4YW1wbGVTaGFyZUJ1dHRvbicsXG4gIEZPUk1BVF9CVVRUT046ICcuRG9jdW1lbnRhdGlvbi1leGFtcGxlRm9ybWF0QnV0dG9uJyxcbiAgUlVOX0JVVFRPTjogJy5Eb2N1bWVudGF0aW9uLWV4YW1wbGVSdW5CdXR0b24nLFxufTtcblxuLyoqXG4gKiBUaGlzIGNvbnRyb2xsZXIgZW5hYmxlcyBwbGF5Z3JvdW5kIGV4YW1wbGVzIHRvIGV4cGFuZCB0aGVpciBkcm9wZG93biBvclxuICogZ2VuZXJhdGUgc2hhcmVhYmxlIEdvIFBsYXlncm91bmQgVVJMcy5cbiAqL1xuZXhwb3J0IGNsYXNzIFBsYXlncm91bmRFeGFtcGxlQ29udHJvbGxlciB7XG4gIC8qKlxuICAgKiBUaGUgYW5jaG9yIHRhZyB1c2VkIHRvIGlkZW50aWZ5IHRoZSBjb250YWluZXIgd2l0aCBhbiBleGFtcGxlIGhyZWYuXG4gICAqIFRoZXJlIGlzIG9ubHkgb25lIGluIGFuIGV4YW1wbGUgY29udGFpbmVyIGRpdi5cbiAgICovXG4gIHByaXZhdGUgcmVhZG9ubHkgYW5jaG9yRWw6IEhUTUxBbmNob3JFbGVtZW50IHwgbnVsbDtcblxuICAvKipcbiAgICogVGhlIGVycm9yIGVsZW1lbnRcbiAgICovXG4gIHByaXZhdGUgcmVhZG9ubHkgZXJyb3JFbDogRWxlbWVudCB8IG51bGw7XG5cbiAgLyoqXG4gICAqIEJ1dHRvbnMgdGhhdCByZWRpcmVjdCB0byBhbiBleGFtcGxlJ3MgcGxheWdyb3VuZCwgdGhpcyBlbGVtZW50XG4gICAqIG9ubHkgZXhpc3RzIGluIGV4ZWN1dGFibGUgZXhhbXBsZXMuXG4gICAqL1xuICBwcml2YXRlIHJlYWRvbmx5IHBsYXlCdXR0b25FbDogRWxlbWVudCB8IG51bGw7XG4gIHByaXZhdGUgcmVhZG9ubHkgc2hhcmVCdXR0b25FbDogRWxlbWVudCB8IG51bGw7XG5cbiAgLyoqXG4gICAqIEJ1dHRvbiB0aGF0IGZvcm1hdHMgdGhlIGNvZGUgaW4gYW4gZXhhbXBsZSdzIHBsYXlncm91bmQuXG4gICAqL1xuICBwcml2YXRlIHJlYWRvbmx5IGZvcm1hdEJ1dHRvbkVsOiBFbGVtZW50IHwgbnVsbDtcblxuICAvKipcbiAgICogQnV0dG9uIHRoYXQgcnVucyB0aGUgY29kZSBpbiBhbiBleGFtcGxlJ3MgcGxheWdyb3VuZCwgdGhpcyBlbGVtZW50XG4gICAqIG9ubHkgZXhpc3RzIGluIGV4ZWN1dGFibGUgZXhhbXBsZXMuXG4gICAqL1xuICBwcml2YXRlIHJlYWRvbmx5IHJ1bkJ1dHRvbkVsOiBFbGVtZW50IHwgbnVsbDtcblxuICAvKipcbiAgICogVGhlIGV4ZWN1dGFibGUgY29kZSBvZiBhbiBleGFtcGxlLlxuICAgKi9cbiAgcHJpdmF0ZSByZWFkb25seSBpbnB1dEVsOiBIVE1MVGV4dEFyZWFFbGVtZW50IHwgbnVsbDtcblxuICAvKipcbiAgICogVGhlIG91dHB1dCBvZiB0aGUgZ2l2ZW4gZXhhbXBsZSBjb2RlLiBUaGlzIG9ubHkgZXhpc3RzIGlmIHRoZVxuICAgKiBhdXRob3Igb2YgdGhlIHBhY2thZ2UgcHJvdmlkZXMgYW4gb3V0cHV0IGZvciB0aGlzIGV4YW1wbGUuXG4gICAqL1xuICBwcml2YXRlIHJlYWRvbmx5IG91dHB1dEVsOiBFbGVtZW50IHwgbnVsbDtcblxuICAvKipcbiAgICogQHBhcmFtIGV4YW1wbGVFbCBUaGUgZGl2IHRoYXQgY29udGFpbnMgcGxheWdyb3VuZCBjb250ZW50IGZvciB0aGUgZ2l2ZW4gZXhhbXBsZS5cbiAgICovXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgcmVhZG9ubHkgZXhhbXBsZUVsOiBIVE1MRGV0YWlsc0VsZW1lbnQpIHtcbiAgICB0aGlzLmV4YW1wbGVFbCA9IGV4YW1wbGVFbDtcbiAgICB0aGlzLmFuY2hvckVsID0gZXhhbXBsZUVsLnF1ZXJ5U2VsZWN0b3IoJ2EnKTtcbiAgICB0aGlzLmVycm9yRWwgPSBleGFtcGxlRWwucXVlcnlTZWxlY3RvcihQbGF5RXhhbXBsZUNsYXNzTmFtZS5FWEFNUExFX0VSUk9SKTtcbiAgICB0aGlzLnBsYXlCdXR0b25FbCA9IGV4YW1wbGVFbC5xdWVyeVNlbGVjdG9yKFBsYXlFeGFtcGxlQ2xhc3NOYW1lLlBMQVlfQlVUVE9OKTtcbiAgICB0aGlzLnNoYXJlQnV0dG9uRWwgPSBleGFtcGxlRWwucXVlcnlTZWxlY3RvcihQbGF5RXhhbXBsZUNsYXNzTmFtZS5TSEFSRV9CVVRUT04pO1xuICAgIHRoaXMuZm9ybWF0QnV0dG9uRWwgPSBleGFtcGxlRWwucXVlcnlTZWxlY3RvcihQbGF5RXhhbXBsZUNsYXNzTmFtZS5GT1JNQVRfQlVUVE9OKTtcbiAgICB0aGlzLnJ1bkJ1dHRvbkVsID0gZXhhbXBsZUVsLnF1ZXJ5U2VsZWN0b3IoUGxheUV4YW1wbGVDbGFzc05hbWUuUlVOX0JVVFRPTik7XG4gICAgdGhpcy5pbnB1dEVsID0gdGhpcy5tYWtlVGV4dEFyZWEoZXhhbXBsZUVsLnF1ZXJ5U2VsZWN0b3IoUGxheUV4YW1wbGVDbGFzc05hbWUuRVhBTVBMRV9JTlBVVCkpO1xuICAgIHRoaXMub3V0cHV0RWwgPSBleGFtcGxlRWwucXVlcnlTZWxlY3RvcihQbGF5RXhhbXBsZUNsYXNzTmFtZS5FWEFNUExFX09VVFBVVCk7XG5cbiAgICAvLyBUaGlzIGlzIGxlZ2FjeSBsaXN0ZW5lciB0byBiZSByZXBsYWNlZCB0aGUgbGlzdGVuZXIgZm9yIHNoYXJlQnV0dG9uRWwuXG4gICAgdGhpcy5wbGF5QnV0dG9uRWw/LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4gdGhpcy5oYW5kbGVTaGFyZUJ1dHRvbkNsaWNrKCkpO1xuICAgIHRoaXMuc2hhcmVCdXR0b25FbD8uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB0aGlzLmhhbmRsZVNoYXJlQnV0dG9uQ2xpY2soKSk7XG4gICAgdGhpcy5mb3JtYXRCdXR0b25FbD8uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB0aGlzLmhhbmRsZUZvcm1hdEJ1dHRvbkNsaWNrKCkpO1xuICAgIHRoaXMucnVuQnV0dG9uRWw/LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4gdGhpcy5oYW5kbGVSdW5CdXR0b25DbGljaygpKTtcblxuICAgIGlmICghdGhpcy5pbnB1dEVsKSByZXR1cm47XG5cbiAgICB0aGlzLnJlc2l6ZSgpO1xuICAgIHRoaXMuaW5wdXRFbC5hZGRFdmVudExpc3RlbmVyKCdrZXl1cCcsICgpID0+IHRoaXMucmVzaXplKCkpO1xuICAgIHRoaXMuaW5wdXRFbC5hZGRFdmVudExpc3RlbmVyKCdrZXlkb3duJywgZSA9PiB0aGlzLm9uS2V5ZG93bihlKSk7XG4gIH1cblxuICAvKipcbiAgICogUmVwbGFjZSB0aGUgcHJlIGVsZW1lbnQgd2l0aCBhIHRleHRhcmVhLiBUaGUgZXhhbXBsZXMgYXJlIGluaXRpYWxseSByZW5kZXJlZFxuICAgKiBhcyBwcmUgZWxlbWVudHMgc28gdGhleSdyZSBmdWxseSB2aXNpYmxlIHdoZW4gSlMgaXMgZGlzYWJsZWQuXG4gICAqL1xuICBtYWtlVGV4dEFyZWEoZWw6IEVsZW1lbnQgfCBudWxsKTogSFRNTFRleHRBcmVhRWxlbWVudCB7XG4gICAgY29uc3QgdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3RleHRhcmVhJyk7XG4gICAgdC5jbGFzc0xpc3QuYWRkKCdEb2N1bWVudGF0aW9uLWV4YW1wbGVDb2RlJywgJ2NvZGUnKTtcbiAgICB0LnNwZWxsY2hlY2sgPSBmYWxzZTtcbiAgICB0LnZhbHVlID0gZWw/LnRleHRDb250ZW50ID8/ICcnO1xuICAgIGVsPy5wYXJlbnRFbGVtZW50Py5yZXBsYWNlQ2hpbGQodCwgZWwpO1xuICAgIHJldHVybiB0O1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHJpZXZlIHRoZSBoYXNoIHZhbHVlIG9mIHRoZSBhbmNob3IgZWxlbWVudC5cbiAgICovXG4gIGdldEFuY2hvckhhc2goKTogc3RyaW5nIHwgdW5kZWZpbmVkIHtcbiAgICByZXR1cm4gdGhpcy5hbmNob3JFbD8uaGFzaDtcbiAgfVxuXG4gIC8qKlxuICAgKiBFeHBhbmRzIHRoZSBjdXJyZW50IHBsYXlncm91bmQgZXhhbXBsZS5cbiAgICovXG4gIGV4cGFuZCgpOiB2b2lkIHtcbiAgICB0aGlzLmV4YW1wbGVFbC5vcGVuID0gdHJ1ZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXNpemVzIHRoZSBpbnB1dCBlbGVtZW50IHRvIGFjY29tb2RhdGUgdGhlIGFtb3VudCBvZiB0ZXh0IHByZXNlbnQuXG4gICAqL1xuICBwcml2YXRlIHJlc2l6ZSgpOiB2b2lkIHtcbiAgICBpZiAodGhpcy5pbnB1dEVsPy52YWx1ZSkge1xuICAgICAgY29uc3QgbnVtTGluZUJyZWFrcyA9ICh0aGlzLmlucHV0RWwudmFsdWUubWF0Y2goL1xcbi9nKSB8fCBbXSkubGVuZ3RoO1xuICAgICAgLy8gbWluLWhlaWdodCArIGxpbmVzIHggbGluZS1oZWlnaHQgKyBwYWRkaW5nICsgYm9yZGVyXG4gICAgICB0aGlzLmlucHV0RWwuc3R5bGUuaGVpZ2h0ID0gYCR7KDIwICsgbnVtTGluZUJyZWFrcyAqIDIwICsgMTIgKyAyKSAvIDE2fXJlbWA7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEhhbmRsZXIgdG8gb3ZlcnJpZGUga2V5Ym9hcmQgYmVoYXZpb3IgaW4gdGhlIHBsYXlncm91bmQnc1xuICAgKiB0ZXh0YXJlYSBlbGVtZW50LlxuICAgKlxuICAgKiBUYWIga2V5IGluc2VydHMgdGFicyBpbnRvIHRoZSBleGFtcGxlIHBsYXlncm91bmQgaW5zdGVhZCBvZlxuICAgKiBzd2l0Y2hpbmcgdG8gdGhlIG5leHQgaW50ZXJhY3RpdmUgZWxlbWVudC5cbiAgICogQHBhcmFtIGUgaW5wdXQgZWxlbWVudCBrZXlib2FyZCBldmVudC5cbiAgICovXG4gIHByaXZhdGUgb25LZXlkb3duKGU6IEtleWJvYXJkRXZlbnQpIHtcbiAgICBpZiAoZS5rZXkgPT09ICdUYWInKSB7XG4gICAgICBkb2N1bWVudC5leGVjQ29tbWFuZCgnaW5zZXJ0VGV4dCcsIGZhbHNlLCAnXFx0Jyk7XG4gICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIENoYW5nZXMgdGhlIHRleHQgb2YgdGhlIGV4YW1wbGUncyBpbnB1dCBib3guXG4gICAqL1xuICBwcml2YXRlIHNldElucHV0VGV4dChvdXRwdXQ6IHN0cmluZykge1xuICAgIGlmICh0aGlzLmlucHV0RWwpIHtcbiAgICAgIHRoaXMuaW5wdXRFbC52YWx1ZSA9IG91dHB1dDtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQ2hhbmdlcyB0aGUgdGV4dCBvZiB0aGUgZXhhbXBsZSdzIG91dHB1dCBib3guXG4gICAqL1xuICBwcml2YXRlIHNldE91dHB1dFRleHQob3V0cHV0OiBzdHJpbmcpIHtcbiAgICBpZiAodGhpcy5vdXRwdXRFbCkge1xuICAgICAgdGhpcy5vdXRwdXRFbC50ZXh0Q29udGVudCA9IG91dHB1dDtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogU2V0cyB0aGUgZXJyb3IgbWVzc2FnZSB0ZXh0IGFuZCBvdmVyd3JpdGVzXG4gICAqIG91dHB1dCBib3ggdG8gaW5kaWNhdGUgYSBmYWlsZWQgcmVzcG9uc2UuXG4gICAqL1xuICBwcml2YXRlIHNldEVycm9yVGV4dChlcnI6IHN0cmluZykge1xuICAgIGlmICh0aGlzLmVycm9yRWwpIHtcbiAgICAgIHRoaXMuZXJyb3JFbC50ZXh0Q29udGVudCA9IGVycjtcbiAgICB9XG4gICAgdGhpcy5zZXRPdXRwdXRUZXh0KCdBbiBlcnJvciBoYXMgb2NjdXJyZWRcdTIwMjYnKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBPcGVucyBhIG5ldyB3aW5kb3cgdG8gcGxheS5nb2xhbmcub3JnIHVzaW5nIHRoZVxuICAgKiBleGFtcGxlIHNuaXBwZXQncyBjb2RlIGluIHRoZSBwbGF5Z3JvdW5kLlxuICAgKi9cbiAgcHJpdmF0ZSBoYW5kbGVTaGFyZUJ1dHRvbkNsaWNrKCkge1xuICAgIGNvbnN0IFBMQVlHUk9VTkRfQkFTRV9VUkwgPSAnaHR0cHM6Ly9wbGF5LmdvbGFuZy5vcmcvcC8nO1xuXG4gICAgdGhpcy5zZXRPdXRwdXRUZXh0KCdXYWl0aW5nIGZvciByZW1vdGUgc2VydmVyXHUyMDI2Jyk7XG5cbiAgICBmZXRjaCgnL3BsYXkvc2hhcmUnLCB7XG4gICAgICBtZXRob2Q6ICdQT1NUJyxcbiAgICAgIGJvZHk6IHRoaXMuaW5wdXRFbD8udmFsdWUsXG4gICAgfSlcbiAgICAgIC50aGVuKHJlcyA9PiByZXMudGV4dCgpKVxuICAgICAgLnRoZW4oc2hhcmVJZCA9PiB7XG4gICAgICAgIGNvbnN0IGhyZWYgPSBQTEFZR1JPVU5EX0JBU0VfVVJMICsgc2hhcmVJZDtcbiAgICAgICAgdGhpcy5zZXRPdXRwdXRUZXh0KGA8YSBocmVmPVwiJHtocmVmfVwiPiR7aHJlZn08L2E+YCk7XG4gICAgICAgIHdpbmRvdy5vcGVuKGhyZWYpO1xuICAgICAgfSlcbiAgICAgIC5jYXRjaChlcnIgPT4ge1xuICAgICAgICB0aGlzLnNldEVycm9yVGV4dChlcnIpO1xuICAgICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogUnVucyBnb2ZtdCBvbiB0aGUgZXhhbXBsZSBzbmlwcGV0IGluIHRoZSBwbGF5Z3JvdW5kLlxuICAgKi9cbiAgcHJpdmF0ZSBoYW5kbGVGb3JtYXRCdXR0b25DbGljaygpIHtcbiAgICB0aGlzLnNldE91dHB1dFRleHQoJ1dhaXRpbmcgZm9yIHJlbW90ZSBzZXJ2ZXJcdTIwMjYnKTtcbiAgICBjb25zdCBib2R5ID0gbmV3IEZvcm1EYXRhKCk7XG4gICAgYm9keS5hcHBlbmQoJ2JvZHknLCB0aGlzLmlucHV0RWw/LnZhbHVlID8/ICcnKTtcblxuICAgIGZldGNoKCcvcGxheS9mbXQnLCB7XG4gICAgICBtZXRob2Q6ICdQT1NUJyxcbiAgICAgIGJvZHk6IGJvZHksXG4gICAgfSlcbiAgICAgIC50aGVuKHJlcyA9PiByZXMuanNvbigpKVxuICAgICAgLnRoZW4oKHsgQm9keSwgRXJyb3IgfSkgPT4ge1xuICAgICAgICB0aGlzLnNldE91dHB1dFRleHQoRXJyb3IgfHwgJ0RvbmUuJyk7XG4gICAgICAgIGlmIChCb2R5KSB7XG4gICAgICAgICAgdGhpcy5zZXRJbnB1dFRleHQoQm9keSk7XG4gICAgICAgICAgdGhpcy5yZXNpemUoKTtcbiAgICAgICAgfVxuICAgICAgfSlcbiAgICAgIC5jYXRjaChlcnIgPT4ge1xuICAgICAgICB0aGlzLnNldEVycm9yVGV4dChlcnIpO1xuICAgICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogUnVucyB0aGUgY29kZSBzbmlwcGV0IGluIHRoZSBleGFtcGxlIHBsYXlncm91bmQuXG4gICAqL1xuICBwcml2YXRlIGhhbmRsZVJ1bkJ1dHRvbkNsaWNrKCkge1xuICAgIHRoaXMuc2V0T3V0cHV0VGV4dCgnV2FpdGluZyBmb3IgcmVtb3RlIHNlcnZlclx1MjAyNicpO1xuXG4gICAgZmV0Y2goJy9wbGF5L2NvbXBpbGUnLCB7XG4gICAgICBtZXRob2Q6ICdQT1NUJyxcbiAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHsgYm9keTogdGhpcy5pbnB1dEVsPy52YWx1ZSwgdmVyc2lvbjogMiB9KSxcbiAgICB9KVxuICAgICAgLnRoZW4ocmVzID0+IHJlcy5qc29uKCkpXG4gICAgICAudGhlbihhc3luYyAoeyBFdmVudHMsIEVycm9ycyB9KSA9PiB7XG4gICAgICAgIHRoaXMuc2V0T3V0cHV0VGV4dChFcnJvcnMgfHwgJycpO1xuICAgICAgICBmb3IgKGNvbnN0IGUgb2YgRXZlbnRzIHx8IFtdKSB7XG4gICAgICAgICAgdGhpcy5zZXRPdXRwdXRUZXh0KGUuTWVzc2FnZSk7XG4gICAgICAgICAgYXdhaXQgbmV3IFByb21pc2UocmVzb2x2ZSA9PiBzZXRUaW1lb3V0KHJlc29sdmUsIGUuRGVsYXkgLyAxMDAwMDAwKSk7XG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgICAuY2F0Y2goZXJyID0+IHtcbiAgICAgICAgdGhpcy5zZXRFcnJvclRleHQoZXJyKTtcbiAgICAgIH0pO1xuICB9XG59XG5cbmNvbnN0IGV4YW1wbGVIYXNoUmVnZXggPSBsb2NhdGlvbi5oYXNoLm1hdGNoKC9eIyhleGFtcGxlLS4qKSQvKTtcbmlmIChleGFtcGxlSGFzaFJlZ2V4KSB7XG4gIGNvbnN0IGV4YW1wbGVIYXNoRWwgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChleGFtcGxlSGFzaFJlZ2V4WzFdKSBhcyBIVE1MRGV0YWlsc0VsZW1lbnQ7XG4gIGlmIChleGFtcGxlSGFzaEVsKSB7XG4gICAgZXhhbXBsZUhhc2hFbC5vcGVuID0gdHJ1ZTtcbiAgfVxufVxuXG4vLyBXZSB1c2UgYSBzcHJlYWQgb3BlcmF0b3IgdG8gY29udmVydCBhIG5vZGVsaXN0IGludG8gYW4gYXJyYXkgb2YgZWxlbWVudHMuXG5jb25zdCBleGFtcGxlSHJlZnMgPSBbXG4gIC4uLmRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGw8SFRNTEFuY2hvckVsZW1lbnQ+KFBsYXlFeGFtcGxlQ2xhc3NOYW1lLlBMQVlfSFJFRiksXG5dO1xuXG4vKipcbiAqIFNvbWV0aW1lcyBleGFtcGxlSHJlZnMgYW5kIHBsYXlDb250YWluZXJzIGFyZSBpbiBkaWZmZXJlbnQgb3JkZXIsIHNvIHdlXG4gKiBmaW5kIGFuIGV4YW1wbGVIcmVmIGZyb20gYSBjb21tb24gaGFzaC5cbiAqIEBwYXJhbSBwbGF5Q29udGFpbmVyIC0gcGxheWdyb3VuZCBjb250YWluZXJcbiAqL1xuY29uc3QgZmluZEV4YW1wbGVIYXNoID0gKHBsYXlDb250YWluZXI6IFBsYXlncm91bmRFeGFtcGxlQ29udHJvbGxlcikgPT5cbiAgZXhhbXBsZUhyZWZzLmZpbmQoZXggPT4ge1xuICAgIHJldHVybiBleC5oYXNoID09PSBwbGF5Q29udGFpbmVyLmdldEFuY2hvckhhc2goKTtcbiAgfSk7XG5cbmZvciAoY29uc3QgZWwgb2YgZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChQbGF5RXhhbXBsZUNsYXNzTmFtZS5QTEFZX0NPTlRBSU5FUikpIHtcbiAgLy8gVGhlcmUgc2hvdWxkIGJlIHRoZSBzYW1lIGFtb3VudCBvZiBocmVmcyByZWZlcmVuY2luZyBleGFtcGxlcyBhcyBleGFtcGxlIGNvbnRhaW5lcnMuXG4gIGNvbnN0IHBsYXlDb250YWluZXIgPSBuZXcgUGxheWdyb3VuZEV4YW1wbGVDb250cm9sbGVyKGVsIGFzIEhUTUxEZXRhaWxzRWxlbWVudCk7XG4gIGNvbnN0IGV4YW1wbGVIcmVmID0gZmluZEV4YW1wbGVIYXNoKHBsYXlDb250YWluZXIpO1xuICBpZiAoZXhhbXBsZUhyZWYpIHtcbiAgICBleGFtcGxlSHJlZi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcbiAgICAgIHBsYXlDb250YWluZXIuZXhwYW5kKCk7XG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgY29uc29sZS53YXJuKCdleGFtcGxlIGhyZWYgbm90IGZvdW5kJyk7XG4gIH1cbn1cbiJdLAogICJtYXBwaW5ncyI6ICJBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQWdCQSxNQUFNLHVCQUF1QjtBQUFBLEVBQzNCLFdBQVc7QUFBQSxFQUNYLGdCQUFnQjtBQUFBLEVBQ2hCLGVBQWU7QUFBQSxFQUNmLGdCQUFnQjtBQUFBLEVBQ2hCLGVBQWU7QUFBQSxFQUNmLGFBQWE7QUFBQSxFQUNiLGNBQWM7QUFBQSxFQUNkLGVBQWU7QUFBQSxFQUNmLFlBQVk7QUFBQTtBQU9QLHlDQUFrQztBQUFBLEVBNEN2QyxZQUE2QixXQUErQjtBQUEvQjtBQUMzQixTQUFLLFlBQVk7QUFDakIsU0FBSyxXQUFXLFVBQVUsY0FBYztBQUN4QyxTQUFLLFVBQVUsVUFBVSxjQUFjLHFCQUFxQjtBQUM1RCxTQUFLLGVBQWUsVUFBVSxjQUFjLHFCQUFxQjtBQUNqRSxTQUFLLGdCQUFnQixVQUFVLGNBQWMscUJBQXFCO0FBQ2xFLFNBQUssaUJBQWlCLFVBQVUsY0FBYyxxQkFBcUI7QUFDbkUsU0FBSyxjQUFjLFVBQVUsY0FBYyxxQkFBcUI7QUFDaEUsU0FBSyxVQUFVLEtBQUssYUFBYSxVQUFVLGNBQWMscUJBQXFCO0FBQzlFLFNBQUssV0FBVyxVQUFVLGNBQWMscUJBQXFCO0FBRzdELFNBQUssY0FBYyxpQkFBaUIsU0FBUyxNQUFNLEtB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
