/*!
 * @license
 * Copyright 2019-2020 The Go Authors. All rights reserved.
 * Use of this source code is governed by a BSD-style
 * license that can be found in the LICENSE file.
 */
const jumpDialog = document.querySelector(".JumpDialog");
const jumpBody = jumpDialog?.querySelector(".JumpDialog-body");
const jumpList = jumpDialog?.querySelector(".JumpDialog-list");
const jumpFilter = jumpDialog?.querySelector(".JumpDialog-input");
const doc = document.querySelector(".js-documentation");
let jumpListItems;
function collectJumpListItems() {
  const items = [];
  if (!doc)
    return;
  for (const el of doc.querySelectorAll("[data-kind]")) {
    items.push(newJumpListItem(el));
  }
  for (const item of items) {
    item.link.addEventListener("click", function() {
      jumpDialog?.close();
    });
  }
  items.sort(function(a, b) {
    return a.lower.localeCompare(b.lower);
  });
  return items;
}
function newJumpListItem(el) {
  const a = document.createElement("a");
  const name = el.getAttribute("id");
  a.setAttribute("href", "#" + name);
  a.setAttribute("tabindex", "-1");
  a.setAttribute("data-gtmc", "jump to link");
  const kind = el.getAttribute("data-kind");
  return {
    link: a,
    name: name ?? "",
    kind: kind ?? "",
    lower: name?.toLowerCase() ?? ""
  };
}
let lastFilterValue;
let activeJumpItem = -1;
function updateJumpList(filter) {
  lastFilterValue = filter;
  if (!jumpListItems) {
    jumpListItems = collectJumpListItems();
  }
  setActiveJumpItem(-1);
  while (jumpList?.firstChild) {
    jumpList.firstChild.remove();
  }
  if (filter) {
    const filterLowerCase = filter.toLowerCase();
    const exactMatches = [];
    const prefixMatches = [];
    const infixMatches = [];
    const makeLinkHtml = (item, boldStart, boldEnd) => {
      return item.name.substring(0, boldStart) + "<b>" + item.name.substring(boldStart, boldEnd) + "</b>" + item.name.substring(boldEnd);
    };
    for (const item of jumpListItems ?? []) {
      const nameLowerCase = item.name.toLowerCase();
      if (nameLowerCase === filterLowerCase) {
        item.link.innerHTML = makeLinkHtml(item, 0, item.name.length);
        exactMatches.push(item);
      } else if (nameLowerCase.startsWith(filterLowerCase)) {
        item.link.innerHTML = makeLinkHtml(item, 0, filter.length);
        prefixMatches.push(item);
      } else {
        const index = nameLowerCase.indexOf(filterLowerCase);
        if (index > -1) {
          item.link.innerHTML = makeLinkHtml(item, index, index + filter.length);
          infixMatches.push(item);
        }
      }
    }
    for (const item of exactMatches.concat(prefixMatches).concat(infixMatches)) {
      jumpList?.appendChild(item.link);
    }
  } else {
    if (!jumpListItems || jumpListItems.length === 0) {
      const msg = document.createElement("i");
      msg.innerHTML = "There are no identifiers on this page.";
      jumpList?.appendChild(msg);
    }
    for (const item of jumpListItems ?? []) {
      item.link.innerHTML = item.name + " <i>" + item.kind + "</i>";
      jumpList?.appendChild(item.link);
    }
  }
  if (jumpBody) {
    jumpBody.scrollTop = 0;
  }
  if (jumpListItems?.length && jumpList && jumpList.children.length > 0) {
    setActiveJumpItem(0);
  }
}
function setActiveJumpItem(n) {
  const cs = jumpList?.children;
  if (!cs || !jumpBody) {
    return;
  }
  if (activeJumpItem >= 0) {
    cs[activeJumpItem].classList.remove("JumpDialog-active");
  }
  if (n >= cs.length) {
    n = cs.length - 1;
  }
  if (n >= 0) {
    cs[n].classList.add("JumpDialog-active");
    const activeTop = cs[n].offsetTop - cs[0].offsetTop;
    const activeBottom = activeTop + cs[n].clientHeight;
    if (activeTop < jumpBody.scrollTop) {
      jumpBody.scrollTop = activeTop;
    } else if (activeBottom > jumpBody.scrollTop + jumpBody.clientHeight) {
      jumpBody.scrollTop = activeBottom - jumpBody.clientHeight;
    }
  }
  activeJumpItem = n;
}
function incActiveJumpItem(delta) {
  if (activeJumpItem < 0) {
    return;
  }
  let n = activeJumpItem + delta;
  if (n < 0) {
    n = 0;
  }
  setActiveJumpItem(n);
}
jumpFilter?.addEventListener("keyup", function() {
  if (jumpFilter.value.toUpperCase() != lastFilterValue.toUpperCase()) {
    updateJumpList(jumpFilter.value);
  }
});
jumpFilter?.addEventListener("keydown", function(event) {
  const upArrow = 38;
  const downArrow = 40;
  const enterKey = 13;
  switch (event.which) {
    case upArrow:
      incActiveJumpItem(-1);
      event.preventDefault();
      break;
    case downArrow:
      incActiveJumpItem(1);
      event.preventDefault();
      break;
    case enterKey:
      if (activeJumpItem >= 0) {
        if (jumpList) {
          jumpList.children[activeJumpItem].click();
          event.preventDefault();
        }
      }
      break;
  }
});
const shortcutsDialog = document.querySelector(".ShortcutsDialog");
document.addEventListener("keypress", function(e) {
  if (jumpDialog?.open || shortcutsDialog?.open) {
    return;
  }
  const target = e.target;
  const t = target?.tagName;
  if (t == "INPUT" || t == "SELECT" || t == "TEXTAREA") {
    return;
  }
  if (target?.contentEditable == "true") {
    return;
  }
  if (e.metaKey || e.ctrlKey) {
    return;
  }
  const ch = String.fromCharCode(e.which);
  switch (ch) {
    case "f":
    case "F":
      e.preventDefault();
      if (jumpFilter) {
        jumpFilter.value = "";
      }
      jumpDialog?.showModal();
      jumpFilter?.focus();
      updateJumpList("");
      break;
    case "?":
      shortcutsDialog?.showModal();
      break;
  }
});
const jumpOutlineInput = document.querySelector(".js-jumpToInput");
if (jumpOutlineInput) {
  jumpOutlineInput.addEventListener("click", () => {
    if (jumpFilter) {
      jumpFilter.value = "";
    }
    updateJumpList("");
  });
}
//# sourceMappingURL=data:application/json;base64,
